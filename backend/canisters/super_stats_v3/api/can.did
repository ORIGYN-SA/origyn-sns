type LogEntry = record {timestamp: text; text: text};
type MemoryStats = record {memory: nat64; heap_memory: nat64};
type MetricStats = record {
    total_errors: nat64;
    total_api_requests: nat64;    
};

type WorkingStats = record {
    timer_active: bool;
    is_busy: bool;
    next_block: nat64;
    ledger_tip_of_chain: nat64;
    is_upto_date: bool;
    directory_count: nat64;
    last_update_time: nat64;
    metrics: MetricStats  
};

type SetTargetArgs = record {
    target_ledger: text;
    hourly_size: nat8;
    daily_size: nat8;
};

type IndexerType = variant {
    DfinityIcp;
    DfinityIcrc2;
    DfinityIcrc3;
};

type InitLedgerArgs = record {
  target: SetTargetArgs;
  index_type: IndexerType;
};

type ProcessedTX = record {
    block: nat64;
    hash: text;
    tx_type: text;
    from_account: text;
    to_account: text;
    tx_value: nat;
    tx_fee: opt nat;
    spender: opt text;
    tx_time: nat64;
};

type TxCount = record { nat32; nat }; // count, value 

type Overview = record {
    first_active: nat64;
    last_active: nat64;
    sent: TxCount; 
    received: TxCount;
    balance: nat;
};

type HolderBalanceResponse = record {
    holder: text;
    data: Overview;
};

type TotalHolderResponse = record {
    total_accounts: nat64;
    total_principals: nat64;
};

type ActiveAccount = record { text; nat64 };

type TotCntAvg = record {
    total_value: nat;
    count: nat;
    average: float64;
};

type TimeChunkStats = record {
    start_time: nat64;
    end_time: nat64;
    total_count: nat64;
    mint_count: nat64;
    transfer_count: nat64;
    burn_count: nat64;
    approve_count: nat64;
};

type TimeStats = record { 
    total_transaction_count: nat;
    total_transaction_value: nat;
    total_transaction_average: float64;
    total_unique_accounts: nat64;
    total_unique_principals: nat64;
    most_active_accounts: vec ActiveAccount;
    most_active_principals: vec ActiveAccount;
    burn_stats: TotCntAvg;
    mint_stats: TotCntAvg;
    transfer_stats: TotCntAvg;
    approve_stats: TotCntAvg;
    count_over_time: vec TimeChunkStats;
    top_mints: vec ProcessedTX;
    top_burns: vec ProcessedTX;
    top_transfers: vec ProcessedTX;
};

type GetHoldersArgs = record {
    offset: nat64;
    limit: nat64;
};

type GetAccountHistoryArgs = record {
    account: text;
    days: nat64;
};

type HistoryData = record {
    balance: nat;
};

type AccountHistory = vec record { nat64; HistoryData; };

type InitArgs = record {
  admin: text;
  test_mode : bool;
};

type ActivitySnapshot = record {
    start_time: nat64;
    end_time: nat64;
    total_unique_accounts: nat64;
    total_unique_principals: nat64;
    accounts_active_during_snapshot: nat64;
    principals_active_during_snapshot: nat64;
};

service : (InitArgs) -> {
    // CORE API
    "add_authorised": (text) -> (text);
    "remove_authorised": (text) -> (text);
    "get_all_authorised": () -> (vec text) query;
    "get_logs": () -> (opt vec LogEntry) query;
    "get_memory_stats": () -> (MemoryStats) query;
    "add_admin": (text) -> (text); 
    "remove_admin": (text) -> (text);
    "get_all_admins": () -> (vec text) query;
    "get_working_stats": () -> (WorkingStats) query; 
    "get_cycles_balance": () -> (nat64) query;
    "deposit_cycles": () -> (); 
    "get_canister_version": () -> (text) query;

    // STATS API
    "init_target_ledger": (InitLedgerArgs) -> (text);
    "get_top_account_holders": (nat64) -> (vec HolderBalanceResponse) query;
    "get_top_principal_holders": (nat64) -> (vec HolderBalanceResponse) query;
    "get_total_holders": () -> (TotalHolderResponse) query;
    "get_hourly_stats": () -> (TimeStats) query;
    "get_daily_stats": () -> (TimeStats) query;
    "get_account_overview": (text) -> (opt Overview) query;
    "get_principal_overview": (text) -> (opt Overview) query;
    "get_principal_holders": (GetHoldersArgs) -> (vec HolderBalanceResponse) query;
    "get_account_holders": (GetHoldersArgs) -> (vec HolderBalanceResponse) query;
    "get_account_history": (GetAccountHistoryArgs) -> (AccountHistory) query;
    "get_principal_history": (GetAccountHistoryArgs) -> (AccountHistory) query;
    "get_activity_stats": (nat64) -> (vec ActivitySnapshot) query;

    // TIMER API
    "start_processing_timer": (nat64) -> (text); // in seconds
    "stop_all_timers": () -> (text);
}
