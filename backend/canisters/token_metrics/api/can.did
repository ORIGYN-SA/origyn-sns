type Account = record { owner : principal; subaccount : opt blob };
type GetHoldersArgs = record {
  offset : nat64;
  limit : nat64;
  merge_accounts_to_principals : bool;
};
type GetHoldersResponse = record {
  current_offset : nat64;
  data : vec record { Account; WalletOverview };
  limit : nat64;
  total_count : nat64;
};
type GovernanceStats = record {
  total_rewards : nat;
  total_staked : nat;
  total_locked : nat;
  total_unlocked : nat;
};
type HistoryData = record { balance : nat };
type InitArgs = record {
  test_mode : bool;
  treasury_account : text;
  ogy_new_ledger_canister_id : principal;
  super_stats_canister_id : principal;
  sns_governance_canister_id : principal;
};
type LockedNeuronsAmount = record {
  one_year : nat64;
  two_years : nat64;
  three_years : nat64;
  four_years : nat64;
  five_years : nat64;
};
type Overview = record {
  balance : nat;
  sent : record { nat32; nat };
  last_active : nat64;
  first_active : nat64;
  received : record { nat32; nat };
};
type TokenSupplyData = record { circulating_supply : nat; total_supply : nat };
type WalletOverview = record {
  total : nat64;
  ledger : Overview;
  governance : GovernanceStats;
};
service : (InitArgs) -> {
  get_all_neuron_owners : () -> (vec principal) query;
  get_holders : (GetHoldersArgs) -> (GetHoldersResponse) query;
  get_locked_neurons_period : () -> (LockedNeuronsAmount) query;
  get_neurons_stats : (opt principal) -> (GovernanceStats) query;
  get_stake_history : (nat64) -> (vec record { nat64; HistoryData }) query;
  get_supply_data : () -> (TokenSupplyData) query;
}